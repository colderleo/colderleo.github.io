(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{654:function(s,t,n){"use strict";n.r(t);var r=n(16),a=Object(r.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"string-c-str-函数用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-c-str-函数用法"}},[s._v("#")]),s._v(" string.c_str()函数用法")]),s._v(" "),n("p",[s._v("https://blog.csdn.net/hanshihao1336295654/article/details/82285526")]),s._v(" "),n("p",[s._v("const char *c_str();\nc_str()函数返回一个指向正规C字符串的指针常量, 内容与本string串相同.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('char c[20]; \nstring s="1234"; \nstrcpy(c,s.c_str()); \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("注意s.c_str()返回的是const类型，不能对其进行赋值。赋值了对应的string对象也不能正常使用。参考 https://www.cnblogs.com/newzol/p/8686076.html")]),s._v(" "),n("p",[s._v("另外，strcpy()不安全，最好用strcpy_s()。")]),s._v(" "),n("h2",{attrs:{id:"string和int互转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string和int互转"}},[s._v("#")]),s._v(" string和int互转")]),s._v(" "),n("p",[s._v("string转int")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('std::string str = "123";\nint n = atoi(str.c_str());\ncout<<n; //123\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("int float等 转string")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//c++ 11中增加to_string方法，在std中。\nstring to_string (int val);\nstring to_string (float val);\n//还有long double 等等\nstd::string pi = "pi is " + std::to_string(3.1415926);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"stl-string-的-find和substr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stl-string-的-find和substr"}},[s._v("#")]),s._v(" STL string 的 find和substr")]),s._v(" "),n("p",[s._v("https://www.cnblogs.com/lyf-sunicey/p/8489472.html")]),s._v(" "),n("h4",{attrs:{id:"string-find"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-find"}},[s._v("#")]),s._v(" string.find")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s;\nint pos = s.find("aa",pos=0)\n//注意这里的pos是整形，s[pos]就对应找位置的字符。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("原型：size_t find ( const string& str, size_t pos = 0 ) const;")]),s._v(" "),n("li",[s._v("功能：查找子字符串第一次出现的位置。")]),s._v(" "),n("li",[s._v("参数说明：str为子字符串，pos为初始查找位置。")]),s._v(" "),n("li",[s._v("返回值：找到的话返回第一次出现的位置，否则返回string::npos，也就是-1")])]),s._v(" "),n("h4",{attrs:{id:"string-substr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-substr"}},[s._v("#")]),s._v(" string.substr")]),s._v(" "),n("ul",[n("li",[s._v("原型：string substr ( size_t pos = 0, size_t n = npos ) const;")]),s._v(" "),n("li",[s._v("功能：获得子字符串。")]),s._v(" "),n("li",[s._v("参数说明：pos为起始位置（默认为0），n为结束位置（默认为npos）")]),s._v(" "),n("li",[s._v("返回值：子字符串")])]),s._v(" "),n("h2",{attrs:{id:"字符串分割"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串分割"}},[s._v("#")]),s._v(" 字符串分割")]),s._v(" "),n("h4",{attrs:{id:"用stl的string类的find和substr实现字符串分割"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用stl的string类的find和substr实现字符串分割"}},[s._v("#")]),s._v(" 用STL的string类的find和substr实现字符串分割")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#include <iostream>\n#include <string>\n#include <vector>\n \n//字符串分割函数\nvector<string> split(string str,string pattern)\n{\n  string::size_type pos;\n  vector<string> result;\n  str+=pattern;//扩展字符串以方便操作. 比如要分割的str="abc#def#ghi"，分隔符为#，那么在结尾添加#，变成"abc#def#ghi#"\n  int size=str.size();//扩展后的字符串长度。\n \n  for(int i=0; i<size; i++)\n  {\n    pos=str.find(pattern,i);//找到分隔符(分隔字符串)的位置\n    if(pos<size)\n    {\n      string s=str.substr(i,pos-i);//取出当前i到分隔符前\n      result.push_back(s);\n      i=pos+pattern.size()-1;\n    }\n  }\n  return result;\n}\n\n//用法\n\nstring s="abc,,def,,123";\nstring pattern=",,";\nvector<string> result;\n\nresult=split(str,pattern);\ncout<< result[0] << result[1] << result[2] << endl;\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("h4",{attrs:{id:"用strtok分割字符串-char"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用strtok分割字符串-char"}},[s._v("#")]),s._v(" 用strtok分割字符串(char*)")]),s._v(" "),n("p",[s._v("该方法在vs2013以上的版本中会提示错误，因为其不安全，要求使用安全的版本strtok_s()。但是strtok_s有3个参数。")]),s._v(" "),n("ul",[n("li",[s._v("原型： char *strtok(char *str, const char *delim);")]),s._v(" "),n("li",[s._v("功能：分解字符串为一组字符串。")]),s._v(" "),n("li",[s._v("参数说明：str为要分解的字符串，delim为分隔符字符串。")]),s._v(" "),n("li",[s._v("返回值：从str开头开始的一个个被分割的串。当没有被分割的串时则返回NULL。")]),s._v(" "),n("li",[s._v("其它：strtok函数线程不安全，可以使用strtok_s/strtok_r替代。")])]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('char s[] = "abc##def##123";\nchar *p;\np = strtok(s,"##");\nprintf("%s-%s\\n", s,s+4);//第一次分割后，输出为“abc-#def##123”，也就是说，strtok把找到的第一个"##"改成了“\\0#”，破坏了原来的字符串。\nprintf("%p,%p\\n", s, p);//此时指针s和 p是一样的。但是当开头出现多个#####时，p就指向abc了。\n\nwhile(p)\n{\n    printf("%s\\n",p);\n    p=strtok(NULL,"##");//第二次分割的时候，不需要再传入s，因为它把剩余的字符串（#def##123）存在它函数自身的一个静态变量里面。\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("如果分割符是##，那么当多个#出现在开头时，会被忽略掉。当出现在中间时，会被改成##。就是说最后多个####连在一起，只被它认为是一个分隔符。")])]),s._v(" "),n("h4",{attrs:{id:"strtok-s-和strtok-r"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#strtok-s-和strtok-r"}},[s._v("#")]),s._v(" strtok_s()和strtok_r()")]),s._v(" "),n("p",[s._v("strtok_s是windows下的一个切割字符串安全函数，strtok_r是linux下的。用法一样。它俩也会破坏原来字符串。\n"),n("a",{attrs:{href:"https://www.cnblogs.com/zhoudingcocng/p/6554418.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.cnblogs.com/zhoudingcocng/p/6554418.html"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("原来的strtok将剩余字符存在函数的静态变量里，如果多线程同时调用，就会出问题，因此线程不安全。这俩新的函数，需要先定义一个char *tmpContext，然后每次把 &tmpContext 作为第三个参数穿进去，就安全了。")]),s._v(" "),n("ul",[n("li",[s._v("跟原来strtok不同是，原来第一次分割，分割的是源字符串s，但是后面分割就是strtok函数内的静态变量了。而新的函数，一直分割的都是源字符串s。")]),s._v(" "),n("li",[s._v("比如说####abc####def##123，strtok第一次会把它分割成####abc\\0###def##123，后面就分割函数内的静态变量了。")]),s._v(" "),n("li",[s._v("新的函数分割3次，第一次变成，####abc\\0###def##123，p指向了abc。第二次分割成####abc\\0###def\\0#123，p指向了def。第三次没改源字符串s，p指向了123。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('char *strtok_s( char *strToken, const char *strDelimit, char **buf);\n\nchar s[] = "abc##def##123";\nchar* tmpContext;\nchar* p;\np = strtok_s(s, "##", &tmpContext);\nprintf("%s-%s\\n", s,tmpContext);\nwhile (p)\n{\n\tprintf("%s\\n", p);//一次打印出abc、def、123\n\tprintf("%p-%p-%p\\n", s, p, tmpContext);//打印出s,p,tmp指向的地址。tmp指向的就是\\0后面的那一位。\n\tp = strtok_s(NULL, "##", &tmpContext);\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);