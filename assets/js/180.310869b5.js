(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{663:function(e,s,t){"use strict";t.r(s);var r=t(21),n=Object(r.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("https://blog.csdn.net/kjing/article/details/6936325")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/cvster/pic/master/img/rbegin_rend.png",alt:""}})]),e._v(" "),t("ul",[t("li",[e._v("reverse_iterator++， 是从后向前++")]),e._v(" "),t("li",[e._v("rebgin()和rend()也是reverse_iterator")]),e._v(" "),t("li",[e._v("r_iter.base() 返回该反向迭代器对应的正向迭代器(除了类型变了，还有对应的指针向后移动了一位。因为这样begin->end 就可以和rbegin->rend对应起来了)")])]),e._v(" "),t("h4",{attrs:{id:"倒序遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#倒序遍历"}},[e._v("#")]),e._v(" 倒序遍历")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// reverse_iterator 倒序遍历 vector\nvector<int> vec;\nvector<int>::reverse_iterator r_iter;\nfor (r_iter = vec.rbegin();  r_iter != vec.rend(); ++r_iter)\n  cout << *r_iter << endl; \n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("h4",{attrs:{id:"sort排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sort排序"}},[e._v("#")]),e._v(" sort排序")]),e._v(" "),t("p",[e._v("除了上面的在写法上与begin(),end()相似，便于记忆和书写，还有一些别的好处。例如：")]),e._v(" "),t("p",[e._v("sort默认是升序排列，向其传入rbegin()和rend()便可以降序排列：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("sort(vec.begin(), vec.end()); //升序\nsort(vec.rbegin(), vec.rend()); //降序\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h4",{attrs:{id:"find查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#find查找"}},[e._v("#")]),e._v(" find查找")]),e._v(" "),t("p",[e._v("string相当于是一个char类型的vector，现在假设有一个string，"),t("code",[e._v('"abc,def,ghi"')]),e._v("，以逗号分隔，想要输出最后一个单词"),t("code",[e._v("ghi")]),e._v("，可利用下面的方法：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("string s=\"abc,def,ghi\";\n\n//用反向迭代器从后向前查找到逗号：\nstring::reverse_iterator rcomma = find(s.rbegin(), s.rend(), ',')\n\n//[rbegin,rcomma)之间，就是ihg，注意这里ihg也是反的。\nstring last_word_reverse = string(s.rbegin(), r_iter);\n\n//想要得到正的，需要用reverse_iterator.base()把反向迭代器转换为正向迭代器\nstring last_word = string(r_iter.base(), s.end());\n//string last_word = string(r_iter.base(), s.rbegin().base());  \n//这里s.rbegin().base()==s.end()\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/cvster/pic/master/img/reverse_iter_base.png",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"迭代器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[e._v("#")]),e._v(" 迭代器")]),e._v(" "),t("p",[e._v("http://m.biancheng.net/view/338.html")]),e._v(" "),t("ul",[t("li",[e._v("vector\t随机访问")]),e._v(" "),t("li",[e._v("deque\t随机访问")]),e._v(" "),t("li",[e._v("list\t双向")]),e._v(" "),t("li",[e._v("set / multiset\t双向")]),e._v(" "),t("li",[e._v("map / multimap\t双向")]),e._v(" "),t("li",[e._v("stack\t不支持迭代器")]),e._v(" "),t("li",[e._v("queue\t不支持迭代器")])]),e._v(" "),t("p",[e._v("迭代器的辅助函数")]),e._v(" "),t("p",[e._v("STL 中有用于操作迭代器的三个函数模板，需要包含头文件 algorithm，它们是：")]),e._v(" "),t("ul",[t("li",[e._v("advance(p, n)：使迭代器 p 向前或向后移动 n 个元素。")]),e._v(" "),t("li",[e._v("distance(p, q)：计算两个迭代器之间的距离，即迭代器 p 经过多少次 + + 操作后和迭代器 q 相等。如果调用时 p 已经指向 q 的后面，则这个函数会陷入死循环。")]),e._v(" "),t("li",[e._v("iter_swap(p, q)：用于交换两个迭代器 p、q 指向的值。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);