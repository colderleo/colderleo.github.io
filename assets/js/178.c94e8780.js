(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{661:function(a,t,s){"use strict";s.r(t);var n=s(21),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("CAS，compare and exchange。传入\n变量，先读它的值，然后")]),a._v(" "),s("h4",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),s("p",[a._v("CAS是原子性的，不会在compare和exchange之间被打断。参考"),s("a",{attrs:{href:"https://blog.csdn.net/Dongguabai/article/details/82461815",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://blog.csdn.net/Dongguabai/article/details/82461815"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("CAS算法包含三个参数：CAS(V,E,N)。V表示要更新的变量，E表示预期值，N表示新值（简单理解就是当且仅当预期值E和内存值V相同时，将内存值V修改为N，否则什么都不做）。")]),a._v(" "),s("h4",{attrs:{id:"c-11的atomic-cas操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-11的atomic-cas操作"}},[a._v("#")]),a._v(" C++11的atomic CAS操作")]),a._v(" "),s("p",[a._v("这篇文章非常棒。"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27053428",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://zhuanlan.zhihu.com/p/27053428"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("这篇文章跟上面的代码差不多，加了注释"),s("a",{attrs:{href:"https://blog.csdn.net/m0_37621078/article/details/89980205",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://blog.csdn.net/m0_37621078/article/details/89980205"),s("OutboundLink")],1)]),a._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typename")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("lock_free_stack")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("struct")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("node")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    T data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    node"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("T "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" data_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" \n     "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("data_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n  std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[a._v("::")]),a._v("atomic"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("T "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    node"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" new_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n    new_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("next"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//目标当前值与期望值不等时，将期望值修改为当前值，并返回false")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//目标当前值与期望值相等时，将目标值修改为设定值")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compare_exchange_weak")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("new_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("new_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br")])]),s("p",[a._v("函数说明："),s("a",{attrs:{href:"http://www.cplusplus.com/reference/atomic/atomic/compare_exchange_weak/",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.cplusplus.com/reference/atomic/atomic/compare_exchange_weak/"),s("OutboundLink")],1)]),a._v(" "),s("h4",{attrs:{id:"compare-exchange-weak-和strong的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compare-exchange-weak-和strong的区别"}},[a._v("#")]),a._v(" compare_exchange_weak 和strong的区别")]),a._v(" "),s("p",[a._v("weak，compare的时候即便相等也可能返回false，一般在循环算法中使用，而且性能比strong有明显提高。strong就是相等了肯定返回true，一般在非循环算法中使用。")]),a._v(" "),s("h4",{attrs:{id:"compare失效情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compare失效情况"}},[a._v("#")]),a._v(" compare失效情况")]),a._v(" "),s("p",[a._v("如果被比较对象有padding bits， trap values，或者交替出现的值（ABA问题），那么可能导致failed comparisons")])])}),[],!1,null,null,null);t.default=e.exports}}]);