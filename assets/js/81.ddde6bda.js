(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{699:function(s,n,t){"use strict";t.r(n);var a=t(16),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("从标准输入读取字符串，按照指定的两层分隔符切分成多对key-value，依次输出到标准输出中。key和value都为非空。")]),s._v(" "),t("p",[s._v("每一行有效输入为3列，以空格分割。第一列表示key_value_paris_delimiter，第二列表示key_value_delimiter，第三列表示字符串。第三列中没有空格。")]),s._v(" "),t("p",[s._v("例子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("输入：\n# : a:3#b:7#c:9\n输出：\n3\na 3\nb 7\nc 9\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h4",{attrs:{id:"方法1-自定义比较函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法1-自定义比较函数"}},[s._v("#")]),s._v(" 方法1 自定义比较函数")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('//input:\n//#m# :> a:>3#m#b:>7#m#c:>9\n//# : a:3#b:7#c:9\n\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\n//比较string a 从aBegin位置开始的n个字符是否和string b 相同。这里n是b的长度\nbool strPartCompare(string a,  int aBegin, string b) {\n\tfor (int i = 0; i < b.length(); ++i) {\n\t\tif (a[aBegin+i] != b[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nint main()\n{\n\n\tstring pair_cut, kv_cut, s;\n\tcin >> pair_cut >> kv_cut >> s;\n\t\n\tint count = 0;\n\tfor (int i = 0; i < s.length(); ++i) {\n\t\t//if (s[i] == pair_cut[0])\n\t\tif (strPartCompare(s,i, pair_cut)) {\n\t\t\tcount++;\n\t\t\ti += pair_cut.length() - 1;\n\t\t}\n\t\t\t\n\t}\n\tcout << count + 1<<endl;\n\n\tfor (int i = 0; i < s.length(); ++i) {\n\t\tif (strPartCompare(s, i, pair_cut)) {\n\t\t\tcout << endl;\n\t\t\ti += pair_cut.length()-1;\n\t\t}\n\t\telse if (strPartCompare(s, i, kv_cut)) {\n\t\t\tcout << " ";\n\t\t\ti += kv_cut.length() - 1;\n\t\t}\n\n\t\telse\n\t\t\tcout << s[i];\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);