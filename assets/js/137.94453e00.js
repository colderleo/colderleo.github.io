(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{626:function(t,s,e){"use strict";e.r(s);var a=e(21),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"设置线程名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置线程名"}},[t._v("#")]),t._v(" 设置线程名")]),t._v(" "),e("div",{staticClass:"language-cpp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/prctl.h>")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Set the name of the calling thread. The name can be up to 16 bytes long, including the terminating null byte.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("prctl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PR_SET_NAME"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"thread_a"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h2",{attrs:{id:"c-thread-pool开源项目阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-thread-pool开源项目阅读"}},[t._v("#")]),t._v(" C-Thread-Pool开源项目阅读")]),t._v(" "),e("ul",[e("li",[t._v("地址："),e("a",{attrs:{href:"https://github.com/Pithikos/C-Thread-Pool",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/Pithikos/C-Thread-Pool"),e("OutboundLink")],1)])]),t._v(" "),e("h4",{attrs:{id:"thread-do"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thread-do"}},[t._v("#")]),t._v(" thread_do()")]),t._v(" "),e("ul",[e("li",[t._v("thpool_ 结构体中存储了线程指针，jobqueue指针；")]),t._v(" "),e("li",[t._v("thread_init()函数创建若干线程，并执行thread_do()函数，thread_do()内循环执行，jobqueue_pull(), 从jobqueue中取任务并执行")])]),t._v(" "),e("h4",{attrs:{id:"bsem结构体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bsem结构体"}},[t._v("#")]),t._v(" bsem结构体")]),t._v(" "),e("ul",[e("li",[t._v("bsem结构体"),e("div",{staticClass:"language-cpp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bsem")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    pthread_mutex_t mutex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pthread_cond_t   cond"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" bsem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])])]),t._v(" "),e("li",[t._v("可以把它看做bool semaphore，v在使用时只会被赋给0或者1。")]),t._v(" "),e("li",[t._v("bsem_wait(* bsem) 会使当前线程在cond上挂起等待。")]),t._v(" "),e("li",[t._v("bsem_post(* bsem) 会唤醒等待在cond上的一个线程。")]),t._v(" "),e("li",[t._v("jobqueue_p->has_jobs 就是一个bsem结构体，表示当前jobqueue中有没有任务。（不表示任务数量）")])]),t._v(" "),e("h4",{attrs:{id:"thread-do-和-jobqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thread-do-和-jobqueue"}},[t._v("#")]),t._v(" thread_do() 和 jobqueue()")]),t._v(" "),e("ul",[e("li",[t._v("thread_do()中在执行jobqueue_pull()之前，会执行bsem_wait(jobqueue_p->has_jobs)，如果没有任务就挂起等待，有任务时被唤醒，然后把has_jobs置为0")]),t._v(" "),e("li",[t._v("bsem_wait(has_jobs)等到有任务后执行jobqueue_pull(), 首先上一个mutex锁(jobqueue_p->rwmutex)，然后从任务链表中取任务，取完如果还有任务，就会执行bsem_post()再唤醒下一个线程。然后解锁rwmutex。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);