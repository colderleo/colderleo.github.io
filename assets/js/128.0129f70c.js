(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{631:function(s,n,t){"use strict";t.r(n);var e=t(16),a=Object(e.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"set和multiset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set和multiset"}},[s._v("#")]),s._v(" set和multiset")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("set内的数据是自动排序的，唯一的。内部结构为红黑树。set中数元素的值不能直接被改变。")])]),s._v(" "),t("li",[t("p",[s._v("set在insert后，原来成员的指针不变。相比之下，vector可能会变(即便是push_back也可能会变)。")])]),s._v(" "),t("li",[t("p",[s._v("multiset就是成员可以重复，其他的跟set差不多。")])])]),s._v(" "),t("p",[s._v("set用法：https://blog.csdn.net/Strawberry_595/article/details/81188509  （这篇文章写得非常棒）")]),s._v(" "),t("h4",{attrs:{id:"速记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#速记"}},[s._v("#")]),s._v(" 速记：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('//引用\n#include <set>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    \n    //初始化\n\tset<int> s;  //这里也可以换成 multiset\n    \n    //set s(op) 以op为排序准则，产生一个空的set/multiset\n    //set s1(s2)  产生某个set/multiset的副本，所有元素都被拷贝\n    //set s(beg,end) 以区间[beg,end)内的所有元素产生一个set/multiset\n    //set s(beg,end, op)  以op为排序准则，区间[beg,end)内的元素产生一个set/multiset\n\n    \n\n\ts.insert(3);//插入\n\ts.insert(6);\n\ts.insert(5);//插入后会自动排序\n\ts.insert(5);//如果是set，重复插入没得用，还是只有一个5。 如果是multiset，就有两个5\n\t\n\n    //s.clear()  清空所有元素。\n        \n\t//遍历\n\tset<int>::iterator it = s.begin();\n\twhile (it != s.end()) {\n\t\tcout << *it << endl;//输出 3 5 6\n\t\tit++;\n\t}\n\n\t//查看某个元素的出现次数\n\tcout <<"5的个数为"<< s.count(5) << endl;//3在set中出现的次数。如果是set，输出1；如果是multiset，输出2。  如果没有该值，输出0\n\n\t//lower_bound，找到大于等于某个值的元素的iterator； \n    //upper_bound，找到大于某个值的元素的iterator（跟lower_bound差不多，就是少了个等于）；\n    //另外注意 <algorithm中有 lower_bound(iter_begin,iter_end),是二分法查找，需要[iter_begin,iter_end)之间按升序排列。参考 https://www.cnblogs.com/mcgrady_ww/p/7685569.html\n\tcout << "s中大于等于3的最小元素为"<< *(s.lower_bound(3)) << endl;  //输出3\n\tcout << "s中大于3的最小元素为"<<*(s.upper_bound(3)) << endl;  //输出5  \n\n\t//bool s.empty()\t查看是否为空\n\n\t//s.earse(iter)  删除iterator指向的元素\n\t//s.earse(iter_begin, iter_end)  删除[iter_begin, iter_end) 这个区间的元素，左闭右开。注意这里的iter_begin指向的是s内的元素\n\t//s.earse(value)  删除某个值\n\n\t//it = s.find(value)\t查找某个值，返回指向该值的iter。 如果没找到则返回end()\n\n\t//s.insert(iter_begin, iter_end) 插入[iter_begin, iter_end) 这个区间的元素。注意这里的iter_begin指向的是s之外的元素。\n\tint a[] = { 1, 4, 3, 7 };\n\ts.insert(a, a + 4);\t\t//set<int>::iterator 类型，只能++，不能+1\n\n\twhile (1);\n\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br")])]),t("h4",{attrs:{id:"自定义比较函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义比较函数"}},[s._v("#")]),s._v(" 自定义比较函数")]),s._v(" "),t("p",[s._v("另外，由于set内部是需要排序的。我们可以自定义比较函数；如果插入的元素是结构体，更需要自定义比较函数。")]),s._v(" "),t("p",[s._v("参考 https://blog.csdn.net/qq_33859479/article/details/77572023")]),s._v(" "),t("p",[s._v("参考2：https://blog.csdn.net/y109y/article/details/82901710")]),s._v(" "),t("ul",[t("li",[s._v("如果元素是结构体，可以直接重载 < operator，将比较函数写在结构体内。")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("struct Info\n{\n\tstring name;\n\tfloat score;\n\t//重载“<”操作符，自定义排序规则\n\tbool operator < (const Info &a) const\n\t{\n\t\t//按score从大到小排列\n\t\treturn a.score<score;\n\t}\n}\n \nset<Info> s;\nset<Info>::iterator it;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("如果元素不是结构体，又不想或者不能在其内部重载 < operator，那么可以在模板定义的时候（set<type,cmp> s），传进去一个functor，就是仿函数(一个class，在内部重载括号操作符)，作为比较函数。")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" \nstruct myComp\n{\n\tbool operator()(const your_type &a,const your_type &b)\n\t{\n\t\treturn a.data > b.data;\n\t}\n}\nset<int,myComp>s;\nset<int,myComp>::iterator it;\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("这里为什么要重载括号操作符呢？是和set的定义有关系。set定义的时候可以传入三个泛型，第二个就是class Compare （functor 仿函数）。在其内部使用时，Compare(a,b)就调用了括号操作符。这种在class内部重载括号操作符的方式称为"),t("strong",[s._v("functor")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("template <class Key,      class Compare = less <key>,     class Alloc = alloc>\nclass set {\n    ...\n};\n\n\n//其中 less<key>定义如下：\ntemplate <class T> struct less : binary_function <T,T,bool> {\n  bool operator() (const T& x, const T& y) const\n    {return x<y;}\n};\n    \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);