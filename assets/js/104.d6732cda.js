(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{465:function(s,n,t){"use strict";t.r(n);var a=t(16),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"左值和右值概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#左值和右值概念"}},[s._v("#")]),s._v(" 左值和右值概念")]),s._v(" "),t("p",[s._v("在C++11中:")]),s._v(" "),t("ul",[t("li",[s._v("可以取地址的，有名字的，非临时的就是左值；")]),s._v(" "),t("li",[s._v("不能取地址的，没有名字的，临时的就是右值；")]),s._v(" "),t("li",[s._v("左值一定在内存中，右值有可能在内存或者寄存器中。")])]),s._v(" "),t("p",[s._v("为什么"),t("code",[s._v("++i")]),s._v("可以作为左值，而"),t("code",[s._v("i++")]),s._v("不可以？\n因为"),t("code",[s._v("++i")]),s._v("返回的是i，而"),t("code",[s._v("i++")]),s._v("返回的是一个临时变量。\nhttps://www.cnblogs.com/nanqiang/p/9979059.html")]),s._v(" "),t("h3",{attrs:{id:"基础知识和内存细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础知识和内存细节"}},[s._v("#")]),s._v(" 基础知识和内存细节")]),s._v(" "),t("p",[s._v("参考："),t("a",{attrs:{href:"https://blog.csdn.net/qianyayun19921028/article/details/80875002",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/qianyayun19921028/article/details/80875002"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("引用类型本身自己并不拥有所绑定对象的内存，只是该对象的一个别名。左值引用是具名变量值的别名，而右值引用则是不具名（匿名）变量的别名。")]),s._v(" "),t("p",[s._v("在C++11中可以取地址的、有名字的就是左值，反之，不能取地址的、没有名字的就是右值（将亡值或纯右值）。")]),s._v(" "),t("p",[s._v("举个例子，int a = b+c, a 就是左值，其有变量名为a，通过&a可以获取该变量的地址；表达式b+c、函数int func()的返回值是右值，在其被赋值给某一变量前，我们不能通过变量名找到它，＆(b+c)这样的操作则不会通过编译。\n左值一定在内存中，右值有可能在内存中也有可能在寄存器中")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int a=5；\nint b=a;//此时a在内存中\n\nint a=5；\nint b=a+1;//此时a+1在寄存器中\n\nint *p=&a;//此时&a在寄存器中\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("引用：就是取别名 ，引用不可以重定义")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('void main()\n{\n    int num1(5);\n    int num2(10);\n    int *pnum(&num1);//将num1的地址传递给pnum\n    int * &rnum = pnum;//rnum是pnum的别名\n    rnum = &num2;//rnumhe pnum指向同一片内存 改变了rnum就相当于改变了pnum\n    cout << *pnum << endl;\n    \n    system("pause");\n}\n\n\nvoid main()\n{\n    int num1(5);\n    int num2(10);\n    int * &rnum = &num1;//这是不允许的 无法从“int *”转换为“int *&”\n    system("pause");\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("从以上两个例子可以看出int *pnum(&num1); int * &rnum = pnum;通过一个指针在进行取别名是可以的，因为此时指针在内存中，而直接int * &rnum = &num1;取别名是不行的，&num1在寄存器中。在内存中的值是可以直接取别名的也就是引用。但是在寄存器中的值在不可以直接被引用的。其实这就是所谓的左值引用和右值引用。")]),s._v(" "),t("p",[s._v("在C++11中可以取地址的、有名字的就是左值，反之，不能取地址的、没有名字的就是右值（将亡值或纯右值）。")]),s._v(" "),t("p",[s._v("在内存中的变量才是可以取地址的，而在寄存器中的变量是不可以取地址的。对于一个不能取地址的表达式或者值是无法直接引用的。所以int * &rnum = &num1;编译不通过。")]),s._v(" "),t("p",[s._v("讲了以上那么多，左值引用就是对一个左值进行引用的类型。右值引用就是对一个右值进行引用的类型。右值引用和左值引用都是属于引用类型。无论是声明一个左值引用还是右值引用，都必须立即进行初始化。而其原因可以理解为是引用类型本身自己并不拥有所绑定对象的内存，只是该对象的一个别名。左值引用是具名变量值的别名，而右值引用则是不具名（匿名）变量的别名。")]),s._v(" "),t("h3",{attrs:{id:"常量左值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量左值"}},[s._v("#")]),s._v(" 常量左值")]),s._v(" "),t("p",[s._v("左值引用通常也不能绑定到右值，但引用是个“万能”的引用类型。它可以接受非常量左值、常量左值、右值对其进行初始化。不过常量左值所引用的右值在它的“余生”中只能是只读的。相对地，非常量左值只能接受非常量左值对其进行初始化。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int &a = 2;       # 左值引用绑定到右值，编译失败\n \nint b = 2;        # 非常量左值\nconst int &c = b; # 常量左值引用绑定到非常量左值，编译通过\nconst int d = 2;  # 常量左值\nconst int &e = c; # 常量左值引用绑定到常量左值，编译通过\nconst int &b =2;  # 常量左值引用绑定到右值，编程通过\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("右值值引用通常不能绑定到任何的左值，要想绑定一个左值到右值引用，通常需要std::move()将左值强制转换为右值，例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int a;\nint &&r1 = c;             # 编译失败\nint &&r2 = std::move(a);  # 编译通过\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("右值引用的方法就是int * &&rnum = &num1; 。")]),s._v(" "),t("p",[s._v("下面来说一下为什么要右值引用，右值引用在你需要使用寄存器中的值的时候可以进行右值引用。寄存器的刷新速度很快，没有右值引用的话就需要将寄存器中的值拷贝到内存中，在进行使用，这是很浪费时间的。")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int getdata(int &&num)\n{\n    cout << num;\n    num += 10;\n    return num;\n}\n\nvoid main()\n{\n    int a = 5;\n    cout << getdata(a + 1) << endl;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("如上int getdata(int &&num)就是对右值进行引用。getdata(a + 1) 中a+1是右值在寄存器中，我们是不可以直接对他进行操作的，如果要操作得将其拷贝到内存中，如果是一个非常大的数据这种拷贝就会很占用内存，如果直接用右值引用就可以直接对其进行操作。从而节约内存。")]),s._v(" "),t("p",[s._v("将右值转化为左值 直接新建变量然后赋值就可以了")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int b=a+1 //将a+1这个右值转变为左值了\nmove(a) //将a这个左值转变为了右值\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"std-forward和引用折叠"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#std-forward和引用折叠"}},[s._v("#")]),s._v(" std::forward和引用折叠")]),s._v(" "),t("p",[s._v("有时候右值可以转为左值，左值可以转为右值。")]),s._v(" "),t("ul",[t("li",[s._v("std::move()，将左值转换为右值")]),s._v(" "),t("li",[s._v("std::forward，完美转发，保持原来的左值/右值属性")])]),s._v(" "),t("p",[s._v("引用折叠：\nhttps://blog.csdn.net/zhangxiao93/article/details/74974546")]),s._v(" "),t("ul",[t("li",[s._v("1.所有右值引用折叠到右值引用上仍然是一个右值引用。（A&& && 变成 A&&）")]),s._v(" "),t("li",[s._v("2.所有的其他引用类型之间的折叠都将变成左值引用。 （A& & 变成 A&; A& && 变成 A&; A&& & 变成 A&）")])]),s._v(" "),t("h3",{attrs:{id:"std-move-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#std-move-原理"}},[s._v("#")]),s._v(" std::move 原理")]),s._v(" "),t("p",[s._v("参考: "),t("a",{attrs:{href:"https://blog.csdn.net/p942005405/article/details/84644069/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/p942005405/article/details/84644069/"),t("OutboundLink")],1)]),s._v(" "),t("blockquote",[t("p",[s._v("右值经过T&&传递类型保持不变还是右值，而左值经过T&&变为普通的左值引用")])]),s._v(" "),t("p",[s._v("std::move源码：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("template<typename T>\ntypename remove_reference<T>::type&& move(T&& t){\n    return static_cast<typename remove_reference<T>::type&&>(t);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('string s("hello");\nstd::move(s) => std::move(string& &&) => 折叠后 std::move(string& )\n此时：T的类型为string&\ntypename remove_reference<T>::type为string \n整个std::move被实例化如下\nstring&& move(string& t) //t为左值，移动后不能在使用t\n{\n    //通过static_cast将string&强制转换为string&&\n    return static_cast<string&&>(t); \n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("注：std::move() 只是改变了对象的类型，实际上并没有move任何东西。")]),s._v(" 看下面的代码：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint main(void) {\n    string a = "haha";\n    string b(a);\n    cout<<"--1 a="<< a <<" b="<< b <<endl; //输出 a=haha b=haha\n    \n    string c(move(a));\n    cout<<"--2 a="<< a <<" c="<< c <<endl; //输出 a= c=haha\n\n    string d = "mmm";\n    cout << "--3-- d=" << d <<endl; //输出 mmm\n    move(d);\n    cout << "--4-- d=" << d <<endl; //输出 mmm\n    string e(d);\n    cout << "--5-- d=" << d <<endl; //输出 mmm\n\treturn 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("上面看似a被move之后自身变成了空字符串，实际上是因为string c的构造函数中，当传入类型为右值，它会把传入的字符串设置成空。通过查看string的源码也可以验证这一点。")]),s._v(" "),t("p",[s._v("对于string d，虽然对它执行了一次move，但是实际上只是改变了类型，并没有做任何事情。并且后续再用d构造e后，d依然没变成空，说明move在后续代码中并没有将d的类型改变为右值，只是"),t("code",[s._v("move(d)")]),s._v("的返回值为右值。")]),s._v(" "),t("h3",{attrs:{id:"右值引用参数重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#右值引用参数重载"}},[s._v("#")]),s._v(" 右值引用参数重载")]),s._v(" "),t("p",[s._v("参考"),t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/97128024",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://zhuanlan.zhihu.com/p/97128024"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("重载右值和非右值，在运行时可以区分开。当拷贝构造函数或者赋值运算符传入的对象为右值时，直接将右值中指针指向的内存区域拿来用，不需要进行内存拷贝和右值内存释放，提高效率。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('\nclass Stack {\npublic:\n\tStack(int size=1000):msize(size),mtop(0) {\n\t\tstd::cout <<this<< ": Stack(int) construct" << std::endl;\n\t\tmpstack = new int[size];\n\t}\n\t~Stack() {\n\t\tstd::cout << this <<": ~Stack()" << std::endl;\n\t\tdelete[]mpstack;\n\t\tmpstack = nullptr;\n\t}\n\n\t// 拷贝构造\n\tStack(const Stack &src):msize(src.msize),mtop(src.mtop) {\n\t\tcout <<this<< ": Stack(const Stack &src)" << endl;\n\t\tmpstack = new int[src.msize];\n\t\tfor (int i = 0; i < mtop; ++i) {\n\t\t\tmpstack[i] = src.mpstack[i];\n\t\t}\n\t}\n\n\t//带右值引用参数的拷贝构造函数\n\tStack(Stack &&src):msize(src.msize),mtop(src.mtop) {\n\t\tcout << this << ": Stack(Stack&&)" << endl;\n\t\tmpstack = src.mpstack;\n\t\tsrc.mpstack = nullptr;\n\t}\n\n\t// 带右值引用参数的赋值运算符重载函数\n\tStack& operator=(Stack &&src)\n\t{\n\t\tcout << this << ": operator=(Stack&&)" << endl;\n\n\t\tif (this == &src)\n\t\t\treturn *this;\n\n\t\tdelete[]mpstack;\n\n\t\tmsize = src.msize;\n\t\tmtop = src.mtop;\n\n\t\t/*此处没有重新开辟内存拷贝数据，把src的资源直接给当前对象，再把src置空*/\n\t\tmpstack = src.mpstack;\n\t\tsrc.mpstack = nullptr;\n\n\t\treturn *this;\n\t}\n\n\t// 赋值重载\n\tStack& operator=(const Stack &src) {\n\t\tcout << this << " operator=" << endl;\n\t\tif (this == &src)\n\t\t\treturn *this;\n\t\tdelete[]mpstack;\n\n\t\tmsize = src.msize;\n\t\tmtop = src.mtop;\n\t\tmpstack = new int[src.msize];\n\t\tfor (int i = 0; i < mtop; ++i) {\n\t\t\tmpstack[i] = src.mpstack[i];\n\t\t}\n\t\treturn *this;\n\t}\n\n\tint getSize() {\n\t\treturn msize;\n\t}\nprivate:\n\tint *mpstack;\n\tint mtop;\n\tint msize;\n};\n\nStack CreateSameSizeStack(Stack &stack)\n{\n\tcout << "create tmp" << endl;\n\tStack tmp(stack.getSize());\n\tcout << "create tmp end" << endl;\n\treturn tmp; //temp对象作为返回值返回时，经历一次copy到main内存中，\n\t//（现在编译器会自动优化，直接生成到main内存中，不存在copy，除非禁用优化）\n}\n\n\nint main() {\n\tStack aa(1000);\n\taa = CreateSameSizeStack(aa);//函数返回值作为一个右值临时变量存在，即等号的右边部分。\n\t//此时调用“带右值引用参数的赋值运算符重载函数”，直接把aa中的数据拿来用，不拷贝。\n\t\n\tcout << "next bb" << endl;\n\tStack bb(aa);\n\treturn 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br")])]),t("h3",{attrs:{id:"返回值优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#返回值优化"}},[s._v("#")]),s._v(" 返回值优化")]),s._v(" "),t("p",[s._v("gcc默认编译是带有返回值优化的，可以通过"),t("code",[s._v("-fno-elide-constructors")]),s._v("禁用。")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include <stdio.h>\n \nclass A {\npublic:\n\tA(int val) {\n\t\tputs("A(int)");\n\t}\n\tA(A&& a) {\n\t\tputs("A(A&&)");\n\t}\n\tA(A& a) {\n\t\tputs("A(A&)");\n\t}\n\t~A() {\n        puts("A destruct");\n    }\n    int m;\n};\nA create_A(int val) {\n\tA a(val); //输出： A(int)\n\tprintf("--1-- &m = %p\\n\\n", &a.m);\n\treturn a; //输出： A(A&&)、A destruct，说明a被拷贝到main的栈里，然后a在这析构了。\n}\n\nint main(void) {\n    A&& temp = create_A(5); //这里加上对temp右值引用是为了防止create_A返回的临时值当场析构。\n    \n    printf("\\n&temp.m=%p\\n", &temp.m); //这里用了一招瞒天过海，temp是右值不能取地址，但是其成员可以去地址。\n\treturn 0;\n}\n\n\n//运行结果如下：\nA(int)\n--1-- &m = 0x7ffcbf0588a4\n    \nA(A&&)   //create_A函数中的return a; 调用了一次拷贝和一次析构。\nA destruct\n\n&temp.m=0x7ffcbf0588dc //两个m的地址不同，同样可以证明函数返回时经历了一次拷贝。\nA destruct\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br")])]),t("p",[s._v("如果不带-fno-elide-constructors，也就是默认启用返回值优化，则输出结果为：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("A(int)\ncreate_A()::&m = 0x7ffc67ca1e2c\n&temp.m=0x7ffc67ca1e2c\nA destruct\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("此时返回值没有拷贝，在执行的时候实际上main函数中首先创建了一片内存，然后把地址传给create_A()，create_A()执行的时候直接在这个地址创建返回值。")]),s._v(" "),t("p",[s._v("另外注意，如果启用返回值优化，而在create_A()函数返回时使用"),t("code",[s._v("return std::move(a);")]),s._v(" ，则返回值优化反而会不起作用，说明编译器没有对这种情况做返回值优化。所以注意不要弄巧成拙。")])])}),[],!1,null,null,null);n.default=e.exports}}]);