(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{689:function(s,a,n){"use strict";n.r(a);var t=n(16),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"整体布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整体布局"}},[s._v("#")]),s._v(" 整体布局")]),s._v(" "),n("p",[s._v("参考："),n("a",{attrs:{href:"https://blog.csdn.net/faxiang1230/article/details/106242380",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/faxiang1230/article/details/106242380"),n("OutboundLink")],1)]),s._v(" "),n("ul",[n("li",[n("p",[s._v("白色区域表示gap，为了防止无意间的访问越界，对该区域的任何读写操作都会触发MMU异常进而收到SIGSEGV信号。")])]),s._v(" "),n("li",[n("p",[s._v("地址空间底部依次是text,data,bss段,程序编译链接的时候就已经确定他们的size,可能加载的时候进行了地址随机化，但是相对地址是固定的.")])]),s._v(" "),n("li",[n("p",[s._v("heap段也就是堆区域，平时我们经常把堆和栈混为一谈，其实他们是分开的，在bss段上方有一个随机的gap区域，之后就是heap的基地址，随着程序的运行他动态向上增长.")])]),s._v(" "),n("li",[n("p",[s._v("mapping区域在在堆和栈中间，它是用来加载依赖动态库的，最顶部的动态库地址和栈基地址有一个间隔，为栈动态增长预留的\n用户空间最上方是栈区域，栈的基地址是内核空间之下的地址，可能会有随机的偏移，随着函数的调用嵌套是向下增长的")])])]),s._v(" "),n("p",[n("img",{attrs:{src:"%5Cpic%5ClinuxFlexibleAddressSpaceLayout.png",alt:"Flexible Process Address Space Layout In Linux"}})]),s._v(" "),n("h3",{attrs:{id:"用户栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户栈"}},[s._v("#")]),s._v(" 用户栈")]),s._v(" "),n("p",[s._v("我们通过ulimit -a看到系统对当前进程的栈size进行了限制,大部分是8M的限制。用户可以通过ulimit -s来修改栈的大小，可以扩充到100M的大小")]),s._v(" "),n("h3",{attrs:{id:"bss段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bss段"}},[s._v("#")]),s._v(" bss段")]),s._v(" "),n("p",[s._v("参考："),n("a",{attrs:{href:"https://www.zhihu.com/question/23059602/answer/23486779",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.zhihu.com/question/23059602/answer/23486779"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("早期的计算机存储设备是很贵的，而很多时候，数据段里的全局变量都是0（或者没有初始值），那么存储这么多的0到目标文件里其实是没有必要的。所以为了节约空间，在生成目标文件的时候，就把没有初始值（实际就是0）的数据段里的变量都放到BSS段里，这样目标文件就不需要那么大的体积里（节约磁盘空间）。只有当目标文件被载入的时候，加载器负责把BSS段清零（一个循环就可以搞定）。 之后，这个规则慢慢的成为一个标准配置，大多数编译器也就都支持了BSS段。")]),s._v(" "),n("p",[s._v("​    bss段通常用来存放程序中未初始化的或初始化为0的全局变量和静态变量，负责将BSS段清零的工作一般是由加载器完成的，当一个可执行文件被加载的时候，加载器（可以简单的理解为操作系统）负责把BSS段的内存清零。有初始化值的全局变量和静态变量在data段。")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#include <stdio.h>\n\nint a = 0;\nint b;\nint c = 5;\n\nint main()\n{\n    printf("data: c,f;  bss:a,b,d,e\\n");\n\n    static int d = 0;\n    static int e;\n    static int f = 5;\n\n    printf("a-bss : %p\\n", &a);//00404014\n    printf("b-bss : %p\\n", &b);//00404010\n    printf("c-data: %p\\n", &c);//00402000\n    printf("d-bss : %p\\n", &d);//00404018\n    printf("e-bss : %p\\n", &e);//00404028\n    printf("f-data: %p\\n", &f);//00402004\n\n    return 0;\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h3",{attrs:{id:"mmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mmap"}},[s._v("#")]),s._v(" mmap")]),s._v(" "),n("p",[s._v("mmap可以指定起始地址，如果该地址不可用，则系统会分配一个随机地址。返回值为为实际分配的地址。")]),s._v(" "),n("p",[s._v("mmap分配的最小长度为pagesize，在shell中可以用"),n("code",[s._v("getconf PAGE_SIZE")]),s._v("获取，一般默认是4096。")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t\tint pagesize = sysconf(_SC_PAGE_SIZE);\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);