(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{517:function(s,t,a){"use strict";a.r(t);var e=a(21),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"tcpdump用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcpdump用法"}},[s._v("#")]),s._v(" tcpdump用法")]),s._v(" "),a("h3",{attrs:{id:"读入文件并分割"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读入文件并分割"}},[s._v("#")]),s._v(" 读入文件并分割")]),s._v(" "),a("p",[s._v("读入一个input.pcap文件并将其分割为多个小文件，每个20M：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("tcpdump  --time-stamp-precision "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nano")]),s._v("  -r input.pcap  -C 20M  -w xxx.pcap\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("--time-stamp-precision nano    设置时间精度为ns")]),s._v(" "),a("li",[s._v("-r input.pcap     读入文件")]),s._v(" "),a("li",[s._v("-w xxx.pcap       输出文件")]),s._v(" "),a("li",[s._v("-C 20M             输出文件大小为20M，满20M后会打开新的，命名为"),a("code",[s._v("xxx.pcap1")])]),s._v(" "),a("li",[s._v("-c 1000           捕获1000个包后停止")]),s._v(" "),a("li",[s._v("-nn               主机名和端口号都以数字显示")]),s._v(" "),a("li",[s._v("-vv               显示较多的信息 verbose")]),s._v(" "),a("li",[s._v("-i interface：指定tcpdump需要监听的接口。若未指定该选项，将从系统接口列表中搜寻编号最小的已配置好的接口(不包括loopback接口，要抓取loopback接口使用tcpdump -i lo)，\n：一旦找到第一个符合条件的接口，搜寻马上结束。可以使用'any'关键字表")]),s._v(" "),a("li",[s._v("-XX：输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细。")]),s._v(" "),a("li",[s._v("host 192.168.1.101    目的或源地址是 192.168.1.101 的网络数据")]),s._v(" "),a("li",[s._v("host aa or host bb    用or同时抓两个ip的数据，用and抓两个ip之间的数据")]),s._v(" "),a("li",[s._v("port 22               目的或源端口是22的网络数据")])]),s._v(" "),a("h3",{attrs:{id:"过滤长度-tcp-payload长度大于48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤长度-tcp-payload长度大于48"}},[s._v("#")]),s._v(" 过滤长度 tcp payload长度大于48")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.51cto.com/u_15169172/2710590",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.51cto.com/u_15169172/2710590"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("tcpdump "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) > 48)'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2))  表示: 整个ip数据包的长度减去ip头的长度,再减去tcp头的长度,即tcp payload长度。")]),s._v(" "),a("li",[s._v("其中，ip[2:2]表示整个ip数据包的长度,")]),s._v(" "),a("li",[s._v("(ip[0]&0xf)<<2)表示ip数据包包头的长度，(ip[0]&0xf代表包中的IHL域, 而此域的单位为32bit, 要换算成字节数需要乘以4,　即左移2.")]),s._v(" "),a("li",[s._v("(tcp[12]&0xf0)>>4 表示tcp头的长度, 此域的单位也是32bit,　换算成比特数为 ((tcp[12]&0xf0) >> 4)　<<2,　即 ((tcp[12]&0xf0)>>2).")]),s._v(" "),a("li",[s._v("对于ipv6版本只需考虑ipv6头中的 'Payload Length' 与 'tcp头的长度' 的差值, 并且其中表达方式ip[]需换成ip6[].)")])]),s._v(" "),a("h3",{attrs:{id:"其他选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他选项"}},[s._v("#")]),s._v(" 其他选项")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_33936481/article/details/51416730",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/qq_33936481/article/details/51416730"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("-A 以ASCII格式打印出所有分组，并将链路层的头最小化。")]),s._v(" "),a("li",[s._v("-c 在收到指定的数量的分组后，tcpdump就会停止。")]),s._v(" "),a("li",[s._v("-C 在将一个原始分组写入文件之前，检查文件当前的大小是否超过了参数file_size 中指定的大小。如果超过了指定大小，则关闭当前文件，然后在打开一个新的文件。参数 file_size 的单位是兆字节（是1,000,000字节，而不是1,048,576字节）。")]),s._v(" "),a("li",[s._v("-d 将匹配信息包的代码以人们能够理解的汇编格式给出。")]),s._v(" "),a("li",[s._v("-dd 将匹配信息包的代码以c语言程序段的格式给出。")]),s._v(" "),a("li",[s._v("-ddd 将匹配信息包的代码以十进制的形式给出。")]),s._v(" "),a("li",[s._v("-D 打印出系统中所有可以用tcpdump截包的网络接口。")]),s._v(" "),a("li",[s._v("-e 在输出行打印出数据链路层的头部信息。")]),s._v(" "),a("li",[s._v("-E 用spi@ipaddr algo:secret解密那些以addr作为地址，并且包含了安全参数索引值spi的IPsec ESP分组。")]),s._v(" "),a("li",[s._v("-f 将外部的Internet地址以数字的形式打印出来。")]),s._v(" "),a("li",[s._v("-F 从指定的文件中读取表达式，忽略命令行中给出的表达式。")]),s._v(" "),a("li",[s._v("-i 指定监听的网络接口。")]),s._v(" "),a("li",[s._v("-l 使标准输出变为缓冲行形式，可以把数据导出到文件。")]),s._v(" "),a("li",[s._v("-L 列出网络接口的已知数据链路。")]),s._v(" "),a("li",[s._v("-m 从文件module中导入SMI MIB模块定义。该参数可以被使用多次，以导入多个MIB模块。")]),s._v(" "),a("li",[s._v("-M 如果tcp报文中存在TCP-MD5选项，则需要用secret作为共享的验证码用于验证TCP-MD5选选项摘要（详情可参考RFC 2385）。")]),s._v(" "),a("li",[s._v("-b 在数据-链路层上选择协议，包括ip、arp、rarp、ipx都是这一层的。")]),s._v(" "),a("li",[s._v("-n 不把网络地址转换成名字。")]),s._v(" "),a("li",[s._v("-nn 不进行端口名称的转换。")]),s._v(" "),a("li",[s._v("-N 不输出主机名中的域名部分。例如，‘nic.ddn.mil‘只输出’nic‘。")]),s._v(" "),a("li",[s._v("-t 在输出的每一行不打印时间戳。")]),s._v(" "),a("li",[s._v("-O 不运行分组分组匹配（packet-matching）代码优化程序。")]),s._v(" "),a("li",[s._v("-P 不将网络接口设置成混杂模式。")]),s._v(" "),a("li",[s._v("-q 快速输出。只输出较少的协议信息。")]),s._v(" "),a("li",[s._v("-r 从指定的文件中读取包(这些包一般通过-w选项产生)。")]),s._v(" "),a("li",[s._v("-S 将tcp的序列号以绝对值形式输出，而不是相对值。")]),s._v(" "),a("li",[s._v("-s 从每个分组中读取最开始的snaplen个字节，而不是默认的68个字节。")]),s._v(" "),a("li",[s._v("-T 将监听到的包直接解释为指定的类型的报文，常见的类型有rpc远程过程调用）和snmp（简单网络管理协议；）。")]),s._v(" "),a("li",[s._v("-t 不在每一行中输出时间戳。")]),s._v(" "),a("li",[s._v("-tt 在每一行中输出非格式化的时间戳。")]),s._v(" "),a("li",[s._v("-ttt 输出本行和前面一行之间的时间差。")]),s._v(" "),a("li",[s._v("-tttt 在每一行中输出由date处理的默认格式的时间戳。")]),s._v(" "),a("li",[s._v("-u 输出未解码的NFS句柄。")]),s._v(" "),a("li",[s._v("-v 输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息。")]),s._v(" "),a("li",[s._v("-vv 输出详细的报文信息。")]),s._v(" "),a("li",[s._v("-w 直接将分组写入文件中，而不是不分析并打印出来。")])]),s._v(" "),a("h2",{attrs:{id:"wireshark、tshark用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wireshark、tshark用法"}},[s._v("#")]),s._v(" wireshark、tshark用法")]),s._v(" "),a("h3",{attrs:{id:"wireshark-editcp-分割pcap包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wireshark-editcp-分割pcap包"}},[s._v("#")]),s._v(" wireshark editcp 分割pcap包")]),s._v(" "),a("p",[s._v("linux下安装wireshark  yum install wireshark\neditcap是wireshark中的一个工具")]),s._v(" "),a("p",[s._v("每200个包分一个文件")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("editcap  -F pcap -c "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" input.pcap output.pcap\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果不指定"),a("code",[s._v("-F pcap")]),s._v(", 则默认使用pcapng格式，在linux下无法被libtrace识别。\n如果这样是不被识别的包，可以通过"),a("code",[s._v("tcpdump -r output.pcap -w output2.pcap")]),s._v(" 再转换一次。")]),s._v(" "),a("p",[s._v("另外editcap切出来的包时间精度也只有us，如果原来是ns则会丢失精度")]),s._v(" "),a("p",[s._v("按时间切包")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("editcap -F pcap -A "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2022-06-17 10:40:00"')]),s._v(" -B "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2022-06-17 10:50:00"')]),s._v(" input.pcap output.pcap\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"tshark导出csv-提取时间戳-过滤tcp长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tshark导出csv-提取时间戳-过滤tcp长度"}},[s._v("#")]),s._v(" tshark导出csv 提取时间戳 过滤tcp长度")]),s._v(" "),a("p",[s._v("tshark是wireshark的linux版本， 可以用它来 -r -w做一些提取数据、fieter、转存等工作")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提取csv")]),s._v("\n$ tshark -t e  -r test.pcap -T fields -e frame.time -e tcp.len -e frame.len\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"May  8, 2022 22:19:52.596857863 CST"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("228")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"May  8, 2022 22:19:52.603060220 CST"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"May  8, 2022 22:19:52.641119297 CST"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("76")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"过滤filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤filter"}},[s._v("#")]),s._v(" 过滤filter")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://wiki.wireshark.org/DisplayFilters",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://wiki.wireshark.org/DisplayFilters"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("过滤tcp长度")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ tshark -t e  -r test.pcap "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tcp.len>=64"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1652019592")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.13 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("101.228")]),s._v(".226.13 TCP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("228")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39862")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43500")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("PSH, ACK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Ack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("319")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1652019593")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.13 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("169.254")]),s._v(".0.55 TCP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("893")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52998")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" lsi-bobcat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("PSH, ACK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Ack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52883")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("837")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"tcpreplay用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcpreplay用法"}},[s._v("#")]),s._v(" tcpreplay用法")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/zhaomax/article/details/82773381",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/zhaomax/article/details/82773381"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("./tcpreplay-edit  -i interface  -l 0  --efcs  xx.pcap")]),s._v(" "),a("p",[s._v("--efcs是去掉以太网帧(数据链路层)末尾的4字节fcs(Ethernet checksums)  网卡发送的时候会在末尾加上4字节fcs，接收方校验是否正确，不正确则丢弃。如果replay的包本身带有末尾4字节fcs，则应该去掉它，防止网卡发送时再在末尾加上4字节fcs。")])])}),[],!1,null,null,null);t.default=r.exports}}]);