(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{604:function(t,s,a){"use strict";a.r(s);var n=a(21),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文章"}},[t._v("#")]),t._v(" 文章")]),t._v(" "),a("p",[t._v("https://www.163.com/dy/article/GF8RI6NE0552D3ZX.html")]),t._v(" "),a("h2",{attrs:{id:"topk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#topk"}},[t._v("#")]),t._v(" TopK")]),t._v(" "),a("h2",{attrs:{id:"用两个栈实现一个队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用两个栈实现一个队列"}},[t._v("#")]),t._v(" 用两个栈实现一个队列")]),t._v(" "),a("h2",{attrs:{id:"stl中哪个容器遍历最快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stl中哪个容器遍历最快"}},[t._v("#")]),t._v(" stl中哪个容器遍历最快？")]),t._v(" "),a("p",[t._v("vector，因为内存连续，cache命中率高")]),t._v(" "),a("h2",{attrs:{id:"mysql优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql优化"}},[t._v("#")]),t._v(" mysql优化")]),t._v(" "),a("h2",{attrs:{id:"inline的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inline的特点"}},[t._v("#")]),t._v(" inline的特点")]),t._v(" "),a("h2",{attrs:{id:"socket-epoll-和select"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-epoll-和select"}},[t._v("#")]),t._v(" socket epoll 和select")]),t._v(" "),a("h2",{attrs:{id:"atomic底层实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#atomic底层实现"}},[t._v("#")]),t._v(" atomic底层实现")]),t._v(" "),a("p",[t._v("总线锁")]),t._v(" "),a("h2",{attrs:{id:"哪些资源是线程独有的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些资源是线程独有的"}},[t._v("#")]),t._v(" 哪些资源是线程独有的")]),t._v(" "),a("p",[t._v("std::thread_local相关")]),t._v(" "),a("p",[t._v("线程共享：进程代码段、进程的公有数据、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID；\n线程私有：线程ID、寄存器里的值、栈、线程的私有数据、线程的优先级、信号屏蔽码、错误返回码。")]),t._v(" "),a("h2",{attrs:{id:"大端小端大小端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大端小端大小端"}},[t._v("#")]),t._v(" 大端小端大小端")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_41016462/article/details/88537650",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/qq_41016462/article/details/88537650"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("大端是人思维的字节序，正常从左到右，地址从小到大。")]),t._v(" "),a("p",[t._v("小端存储是整体按字节从右向左看，但是每个字节内部是不变的。")]),t._v(" "),a("p",[t._v("对于结构体来说，小端是整个结构体按字节从右向左，第一个成员在最右端。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint16_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("myst")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint16_t")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint16_t")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint16_t")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("myst")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x2041")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("myst")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("system")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pause"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("0x2041在大端中内存为 "),a("code",[t._v("0010 0000 0100 0001")]),t._v("  （从左到右，低地址->高地址，每个bit内部也是低->高）\n所以在大端中a为001 b为00000010 c为00001")])]),t._v(" "),a("li",[a("p",[t._v("0x2041在小端中的内存为 "),a("code",[t._v("1000 0010 0000 0100")]),t._v("  （从左到右，低地址->高地址，每个bit内部也是低->高）\n按字节从右向左，跟大端刚好完全相反\n所以在小端中a为前 3 bit 100， b为接下来8bit 00010000, c为 00100")])]),t._v(" "),a("li",[a("p",[t._v("不论大端小端，p->a 都等于3， p->b都等于8  p->c都等于5， 也就是说大小端位域的用法在自身机器上都是自洽的，可以正常使用\n对于左移，不论大小端，都是往最高字节移，不溢出的情况下，左移1位都相当于乘以2，也就是说位移运算也是自洽的。")])]),t._v(" "),a("li",[a("p",[t._v("小端机器上："),a("code",[t._v("printf(%d\\n, htons(6))")]),t._v(", 输出为1536。 将6从小端转为网络字节序，6在小端内存中为"),a("code",[t._v("0x06 0x00")]),t._v(", 二进制为"),a("code",[t._v("0000 0000 0000 0110")]),t._v(", 转成网络字节序并不是连同字节内部也转成大端，而是以字节为单位逆序，字节内部是不变的，也就是转换为"),a("code",[t._v("0x00 0x06")]),t._v(", 二进制为"),a("code",[t._v("0000 0110 0000 0000")]),t._v(",十进制为1536。")])])]),t._v(" "),a("h2",{attrs:{id:"堆排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆排序"}},[t._v("#")]),t._v(" 堆排序")]),t._v(" "),a("p",[t._v("https://www.jianshu.com/p/21bef3fc3030")]),t._v(" "),a("h2",{attrs:{id:"读写锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写锁"}},[t._v("#")]),t._v(" 读写锁")]),t._v(" "),a("p",[t._v("具体实现")]),t._v(" "),a("h2",{attrs:{id:"字节对齐的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节对齐的好处"}},[t._v("#")]),t._v(" 字节对齐的好处")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("不同cpu的结构不一样，不对齐的话可能会出现数据不一致；")])]),t._v(" "),a("li",[a("p",[t._v("提高cpu读取效率：比如有些平台CPU从内存中偶数地址开始读取数据，如果数据起始地址正好为偶数，则1个读取周期就可以读出一个int类型的值，而如果数据其实地址为奇数，那我们就需要2个读取周期读出数据，并对高地址和低地址进行拼凑，这在读取效率上显然已经落后了很多了。")])])]),t._v(" "),a("h2",{attrs:{id:"位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[t._v("#")]),t._v(" 位运算")]),t._v(" "),a("h4",{attrs:{id:"算术右移和逻辑右移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算术右移和逻辑右移"}},[t._v("#")]),t._v(" 算术右移和逻辑右移")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("参考: "),a("a",{attrs:{href:"https://blog.csdn.net/weixin_44509533/article/details/109080809",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/weixin_44509533/article/details/109080809"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("左移比较简单，算术左移和逻辑左移一样都是右边补0")])]),t._v(" "),a("li",[a("p",[t._v("右移包括算术右移和逻辑右移")]),t._v(" "),a("ul",[a("li",[t._v("逻辑右移很简单，只要将二进制数整体右移，左边补0即可")]),t._v(" "),a("li",[t._v("算术右移符号位要一起移动，并且在左边补上符号位，也就是如果符号位是1就补1符号位是0就补0")]),t._v(" "),a("li",[a("strong",[t._v("c语言中有符号类型右移时用算术右移； 无符号数移位时用逻辑右移。（不同机器可能不同）")]),t._v(" 也就是说，不管有无符号，右移后都减半。")])])]),t._v(" "),a("li",[a("p",[t._v("移动位数超出32或64时取余数或置零等（取决于编译器）：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("取余的情况：在移位运算时，byte、short和char类型移位后的结果会变成int类型，对于byte、short、char和int进行移位时，编译器实际移动的次数是移动次数是32的余数，也就是移位33次和移位1次得到的结果相同。移动64位时，实际移动64的余数，也就是移动66次和移动2次得到的结果相同。")])]),t._v(" "),a("li",[a("p",[t._v("其他情况：编译器不一定会取余，也可能使移位结果变为0，或者做其他处理，取决于编译器。")])])])])]),t._v(" "),a("h4",{attrs:{id:"位运算示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算示例"}},[t._v("#")]),t._v(" 位运算示例")]),t._v(" "),a("p",[t._v("有时位运算可以避免使用if，从而降低 cpu pipeline 分支预测错误带来的开销。")]),t._v(" "),a("p",[t._v("n字节对齐，把a按n(2的整数次方)对齐的位运算为：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即如果 qn < a <=(q+1)n, 则把a对齐到(q+1)n。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//align should be power of 2, like 1024")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("ALIGN_UP")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" align"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("align"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("align"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("ALIGN_DOWN")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" align"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t    \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("align"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"delete和delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete和delete"}},[t._v("#")]),t._v(" delete和delete[]")]),t._v(" "),a("p",[t._v("参考: "),a("a",{attrs:{href:"https://blog.csdn.net/u012936940/article/details/80919880",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/u012936940/article/details/80919880"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("唯一区别： 对于自定义数据类型，delete [] 可以逐个调用析构函数，而delete只会调用一个。")]),t._v(" "),a("h2",{attrs:{id:"构造函数和析构函数中调用虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数和析构函数中调用虚函数"}},[t._v("#")]),t._v(" 构造函数和析构函数中调用虚函数")]),t._v(" "),a("p",[t._v("可以调，但是调了不会呈现出多态")]),t._v(" "),a("h2",{attrs:{id:"匿名联合体和匿名结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名联合体和匿名结构体"}},[t._v("#")]),t._v(" 匿名联合体和匿名结构体")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/openblog/article/details/7548363",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/openblog/article/details/7548363"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);