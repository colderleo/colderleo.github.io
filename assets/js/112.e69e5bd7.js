(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{655:function(e,t,s){"use strict";s.r(t);var a=s(16),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"c-thread-pool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-thread-pool"}},[e._v("#")]),e._v(" C-Thread-Pool")]),e._v(" "),s("ul",[s("li",[e._v("地址："),s("a",{attrs:{href:"https://github.com/Pithikos/C-Thread-Pool",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/Pithikos/C-Thread-Pool"),s("OutboundLink")],1)])]),e._v(" "),s("h4",{attrs:{id:"thread-do"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thread-do"}},[e._v("#")]),e._v(" thread_do()")]),e._v(" "),s("ul",[s("li",[e._v("thpool_ 结构体中存储了线程指针，jobqueue指针；")]),e._v(" "),s("li",[e._v("thread_init()函数创建若干线程，并执行thread_do()函数，thread_do()内循环执行，jobqueue_pull(), 从jobqueue中取任务并执行")])]),e._v(" "),s("h4",{attrs:{id:"bsem结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bsem结构体"}},[e._v("#")]),e._v(" bsem结构体")]),e._v(" "),s("ul",[s("li",[e._v("bsem结构体"),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("typedef struct bsem {\n    pthread_mutex_t mutex;\n    pthread_cond_t   cond;\n    int v;\n} bsem;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])])]),e._v(" "),s("li",[e._v("可以把它看做bool semaphore，v在使用时只会被赋给0或者1。")]),e._v(" "),s("li",[e._v("bsem_wait(* bsem) 会使当前线程在cond上挂起等待。")]),e._v(" "),s("li",[e._v("bsem_post(* bsem) 会唤醒等待在cond上的一个线程。")]),e._v(" "),s("li",[e._v("jobqueue_p->has_jobs 就是一个bsem结构体，表示当前jobqueue中有没有任务。（不表示任务数量）")])]),e._v(" "),s("h4",{attrs:{id:"thread-do-和-jobqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thread-do-和-jobqueue"}},[e._v("#")]),e._v(" thread_do() 和 jobqueue()")]),e._v(" "),s("ul",[s("li",[e._v("thread_do()中在执行jobqueue_pull()之前，会执行bsem_wait(jobqueue_p->has_jobs)，如果没有任务就挂起等待，有任务时被唤醒，然后把has_jobs置为0")]),e._v(" "),s("li",[e._v("bsem_wait(has_jobs)等到有任务后执行jobqueue_pull(), 首先上一个mutex锁(jobqueue_p->rwmutex)，然后从任务链表中取任务，取完如果还有任务，就会执行bsem_post()再唤醒下一个线程。然后解锁rwmutex。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);