(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{622:function(a,e,n){"use strict";n.r(e);var s=n(16),t=Object(s.a)({},(function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("p",[a._v("CAS，compare and exchange。传入\n变量，先读它的值，然后")]),a._v(" "),n("h4",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),n("p",[a._v("CAS是原子性的，不会在compare和exchange之间被打断。参考"),n("a",{attrs:{href:"https://blog.csdn.net/Dongguabai/article/details/82461815",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://blog.csdn.net/Dongguabai/article/details/82461815"),n("OutboundLink")],1)]),a._v(" "),n("p",[a._v("CAS算法包含三个参数：CAS(V,E,N)。V表示要更新的变量，E表示预期值，N表示新值（简单理解就是当且仅当预期值E和内存值V相同时，将内存值V修改为N，否则什么都不做）。")]),a._v(" "),n("h4",{attrs:{id:"c-11的atomic-cas操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-11的atomic-cas操作"}},[a._v("#")]),a._v(" C++11的atomic CAS操作")]),a._v(" "),n("p",[a._v("这篇文章非常棒。"),n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27053428",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://zhuanlan.zhihu.com/p/27053428"),n("OutboundLink")],1)]),a._v(" "),n("p",[a._v("这篇文章跟上面的代码差不多，加了注释"),n("a",{attrs:{href:"https://blog.csdn.net/m0_37621078/article/details/89980205",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://blog.csdn.net/m0_37621078/article/details/89980205"),n("OutboundLink")],1)]),a._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("template<typename T>\nclass lock_free_stack\n{\nprivate:\n  struct node\n  {\n    T data;\n    node* next;\n\n    node(T const& data_): \n     data(data_)\n    {}\n  };\n\n  std::atomic<node*> head;\npublic:\n  void push(T const& data)\n  {\n    node* const new_node=new node(data); \n    new_node->next=head.load();\n    \n    //目标当前值与期望值不等时，将期望值修改为当前值，并返回false\n    //目标当前值与期望值相等时，将目标值修改为设定值\n    while(!head.compare_exchange_weak(new_node->next,new_node));\n  }\n};\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br")])]),n("p",[a._v("函数说明："),n("a",{attrs:{href:"http://www.cplusplus.com/reference/atomic/atomic/compare_exchange_weak/",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.cplusplus.com/reference/atomic/atomic/compare_exchange_weak/"),n("OutboundLink")],1)]),a._v(" "),n("h4",{attrs:{id:"compare-exchange-weak-和strong的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compare-exchange-weak-和strong的区别"}},[a._v("#")]),a._v(" compare_exchange_weak 和strong的区别")]),a._v(" "),n("p",[a._v("weak，compare的时候即便相等也可能返回false，一般在循环算法中使用，而且性能比strong有明显提高。strong就是相等了肯定返回true，一般在非循环算法中使用。")]),a._v(" "),n("h4",{attrs:{id:"compare失效情况"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compare失效情况"}},[a._v("#")]),a._v(" compare失效情况")]),a._v(" "),n("p",[a._v("如果被比较对象有padding bits， trap values，或者交替出现的值（ABA问题），那么可能导致failed comparisons")])])}),[],!1,null,null,null);e.default=t.exports}}]);