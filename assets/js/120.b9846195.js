(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{646:function(n,s,t){"use strict";t.r(s);var a=t(16),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("https://www.cnblogs.com/decade-dnbc66/p/5347088.html")]),n._v(" "),t("p",[n._v("重载operator()运算符的类。")]),n._v(" "),t("p",[n._v("仿函数（functor）又称为函数对象（function object）是一个能行使函数功能的类。作为仿函数的类，都必须重载operator()运算符")]),n._v(" "),t("h4",{attrs:{id:"函数指针作为参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数指针作为参数"}},[n._v("#")]),n._v(" 函数指针作为参数")]),n._v(" "),t("p",[n._v("首先介绍一个函数count_if")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//假设我们有一个vector<string>,存了一些字符串，\nvector<string> v = {"aaa","bbb","cdefgh"};\n\n//另外自定义一个函数，该函数传入string，判断其长度是否小于5\nbool shortThanFive(const string& str) {\n    return str.length()<5;    \n}\n\n//找到v中满足shortThanFive的元素的个数。\nint num=count_if(v.begin(),v.end(),shortThanFive);   \n\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("p",[n._v("自定义一个ifFunc，")]),n._v(" "),t("p",[n._v("这里的ifFunc和set、map等自定义比较函数类似，都是传入一个函数指针作为参数。")]),n._v(" "),t("p",[n._v("但是这个ifFunc只是一个函数指针，没有参数。比如说vector里面是一些字符串，如果你想统计字符串长度大于5的数量，这个5可以在ifFunc里面写死，但是如果能把5作为ifFunc的参数传进去才是最好的。")]),n._v(" "),t("h4",{attrs:{id:"functor-仿函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functor-仿函数"}},[n._v("#")]),n._v(" functor 仿函数")]),n._v(" "),t("p",[n._v("上面的问题可以用仿函数来解决。最后一个参数传的不是函数指针，而是一个重载了() operator的类。")]),n._v(" "),t("p",[n._v("跟上面一样：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class ShorterThanFive {\n    public:\n        bool operator() (const string& str) const {\n            return str.length() < 5;\n        }\n};\n\n//这里调用的时候， 要传括号进去，因为传入的是一个类对象，括号表示调用其构造函数。\nint num=count_if(v.begin(),v.end(),shortThanFive());  \n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("p",[n._v("下面给这个类增加一个成员变量length，在count_if调用的时候，传入"),t("code",[n._v("shortThan(5)")]),n._v(",等于说在其构造函数中，把5赋给其成员变量length。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class ShorterThan {\n    public:\n        explicit ShorterThan(int maxLength) : length(maxLength) {}\n        bool operator() (const string& str) const {\n            return str.length() < length;\n        }\n    private:\n        const int length;\n};\n\nint num=count_if(v.begin(),v.end(),shortThan(5));  \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("h4",{attrs:{id:"拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拓展"}},[n._v("#")]),n._v(" 拓展：")]),n._v(" "),t("p",[n._v("找到begin和end之间的值value的元素的个数。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("int num=count(vector1.begin(),vector2.end(),value);\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("p",[n._v("//注意不是vector的类函数哟！！")])])}),[],!1,null,null,null);s.default=e.exports}}]);